
version: 2.1

orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'

commands:
  
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            sudo npm install --global n
            sudo n 13.8.0

  destroy_environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string
        default: ${CIRCLECI_WORKFLOW_ID}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm "s3://udapeople-<<parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<< parameters.workflow_id>>
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install > /dev/null
              npm run migrations:revert
            fi
   
         
    
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install 
            npm run build 
            
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install 
             npm run build 
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test frontend
          command: |
             cd frontend
             npm install
             npm run test
             
                
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [test-backend]
     - run: 
        name: test backend
        command: |
           cd backend
           npm install
           npm run test
      
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
         keys: [scan-frontend]
      # Your job code here
      - run:
         name: scan frontend
         command: |
           cd frontend
           npm install
           ## npm install oauth-sign@^0.9.0
           npm audit fix --audit-level=critical --force
           
           

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
         keys: [scan-backend]
      # Your job code here
      - run: 
         name: scan backend
         command: |
           cd backend
           npm install
           ## npm install oauth-sign@^0.9.0
           #  npm audit fix --audit-level=critical --force
           npm update mkdirp --depth 2
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical

                       
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo $(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text) >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environments:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     # - image: python:3.7-alpine3.16 
  #     # - image: python:3.9.1-alpine3.12  
  #     - image: python:3.11-rc-alpine  
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["a3:c0:12:e5:23:e7:fa:23:10:a5:d9:ae:b6:99:35:80"] 
          
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           # apk add tar gzip 
  #           # apk add --update ansible aws-cli
  #           # apk add --update --no-cache tar gzip ansible awscli
  #           # apk add --update tar gzip ansible
  #           # pip install awscli
  #           apk update 
  #           apk upgrade
  #           apk add --update ansible
  #           apk --no-cache add python3 py3-pip
  #           pip3 install --upgrade pip
  #           pip3 install --no-cache-dir awscli
  #           #exit 1
            
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           echo NODE_ENV=production > ~/project/backend/.env
  #           echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
  #           echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
  #           echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
  #           echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
  #           cat ~/project/backend/.env

  #           cd ~/project/.circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml 

            
            
  #           #exit 1
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy_environments:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: [b7:fa:6c:bb:e0:d3:80:7c:4b:65:a2:bc:76:47:2b:9b]
      - attach_workspace:
          at: ./workspace
      - run:
          name: Configure server
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=backend-udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
          no_output_timeout: 30m
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend

      - destroy_environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      # - image: circleci/node:13.8.0
      # - image: python:3.9-bullseye
      # - image: python:3.10-alpine3.16
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            # exit 1
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/DG6z5ZtedjGhBEiEM83Z5o/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
           
      - destroy_environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
     # Here's where you will add some code to rollback on failure  


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: python:3.9.1-alpine3.12
      - image: python:3.11-rc-alpine
      #- image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk add tar gzip 
            apk add npm nodejs
            apk add --update ansible aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"           
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env                         
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            # cd frontend
            # npm install --silent
            # npm run build 2>/dev/null
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 2>/dev/null
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy_environments:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: [b7:fa:6c:bb:e0:d3:80:7c:4b:65:a2:bc:76:47:2b:9b]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}



  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            
            # echo curl -s ${API_URL}/api/status | grep "ok"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo $URL
            if curl ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # - destroy_environments:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 


 

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]

